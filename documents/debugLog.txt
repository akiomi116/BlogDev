<!doctype html>
<html lang=en>
  <head>
    <title>jinja2.exceptions.TemplateNotFound: index.html
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "FPF2qzgTLORMrMEooZx4";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TemplateNotFound</h1>
<div class="detail">
  <p class="errormsg">jinja2.exceptions.TemplateNotFound: index.html
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2167063810480">
  <h4>File <cite class="filename">"F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2167063810624">
  <h4>File <cite class="filename">"F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2167063810768">
  <h4>File <cite class="filename">"F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()
<span class="ws">                </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2167063810912">
  <h4>File <cite class="filename">"F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)
<span class="ws">            </span>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2167063811056">
  <h4>File <cite class="filename">"F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()
<span class="ws">                </span>     ^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2167063811200">
  <h4>File <cite class="filename">"F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2167063811344">
  <h4>File <cite class="filename">"F:\dev\BrogDev\app\routes\home.py"</cite>,
      line <em class="line">9</em>,
      in <code class="function">index</code></h4>
  <div class="source "><pre class="line before"><span class="ws"></span>home_bp = Blueprint(&#39;home&#39;, __name__)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws"></span>@home_bp.route(&#39;/&#39;)</pre>
<pre class="line before"><span class="ws"></span>def index():</pre>
<pre class="line before"><span class="ws">     </span>#template_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), &#39;templates&#39;, &#39;index.html&#39;)  # 相対パスを絶対パスに</pre>
<pre class="line current"><span class="ws">     </span>return render_template(&#39;index.html&#39;)
<span class="ws">     </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre></div>
</div>

<li><div class="frame" id="frame-2167063811488">
  <h4>File <cite class="filename">"F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\templating.py"</cite>,
      line <em class="line">149</em>,
      in <code class="function">render_template</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>:param template_name_or_list: The name of the template to render. If</pre>
<pre class="line before"><span class="ws">        </span>a list is given, the first name to exist will be rendered.</pre>
<pre class="line before"><span class="ws">    </span>:param context: The variables to make available in the template.</pre>
<pre class="line before"><span class="ws">    </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">    </span>app = current_app._get_current_object()  # type: ignore[attr-defined]</pre>
<pre class="line current"><span class="ws">    </span>template = app.jinja_env.get_or_select_template(template_name_or_list)
<span class="ws">    </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">    </span>return _render(app, template, context)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span>def render_template_string(source: str, **context: t.Any) -&gt; str:</pre>
<pre class="line after"><span class="ws">    </span>&#34;&#34;&#34;Render a template from the given source string with the given</pre></div>
</div>

<li><div class="frame" id="frame-2167063811632">
  <h4>File <cite class="filename">"F:\dev\BrogDev\flaskenv\Lib\site-packages\jinja2\environment.py"</cite>,
      line <em class="line">1087</em>,
      in <code class="function">get_or_select_template</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>is given, or :meth:`get_template` if one name is given.</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>.. versionadded:: 2.3</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line before"><span class="ws">        </span>if isinstance(template_name_or_list, (str, Undefined)):</pre>
<pre class="line current"><span class="ws">            </span>return self.get_template(template_name_or_list, parent, globals)
<span class="ws">            </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws">        </span>elif isinstance(template_name_or_list, Template):</pre>
<pre class="line after"><span class="ws">            </span>return template_name_or_list</pre>
<pre class="line after"><span class="ws">        </span>return self.select_template(template_name_or_list, parent, globals)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def from_string(</pre></div>
</div>

<li><div class="frame" id="frame-2167063811776">
  <h4>File <cite class="filename">"F:\dev\BrogDev\flaskenv\Lib\site-packages\jinja2\environment.py"</cite>,
      line <em class="line">1016</em>,
      in <code class="function">get_template</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if isinstance(name, Template):</pre>
<pre class="line before"><span class="ws">            </span>return name</pre>
<pre class="line before"><span class="ws">        </span>if parent is not None:</pre>
<pre class="line before"><span class="ws">            </span>name = self.join_path(name, parent)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>return self._load_template(name, globals)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>@internalcode</pre>
<pre class="line after"><span class="ws">    </span>def select_template(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>names: t.Iterable[t.Union[str, &#34;Template&#34;]],</pre></div>
</div>

<li><div class="frame" id="frame-2167063811920">
  <h4>File <cite class="filename">"F:\dev\BrogDev\flaskenv\Lib\site-packages\jinja2\environment.py"</cite>,
      line <em class="line">975</em>,
      in <code class="function">_load_template</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">                </span>if globals:</pre>
<pre class="line before"><span class="ws">                    </span>template.globals.update(globals)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">                </span>return template</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line current"><span class="ws">        </span>template = self.loader.load(self, name, self.make_globals(globals))
<span class="ws">        </span>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span>if self.cache is not None:</pre>
<pre class="line after"><span class="ws">            </span>self.cache[cache_key] = template</pre>
<pre class="line after"><span class="ws">        </span>return template</pre>
<pre class="line after"><span class="ws"></span> </pre></div>
</div>

<li><div class="frame" id="frame-2167063812064">
  <h4>File <cite class="filename">"F:\dev\BrogDev\flaskenv\Lib\site-packages\jinja2\loaders.py"</cite>,
      line <em class="line">126</em>,
      in <code class="function">load</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>if globals is None:</pre>
<pre class="line before"><span class="ws">            </span>globals = {}</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span># first we try to get the source for this template together</pre>
<pre class="line before"><span class="ws">        </span># with the filename and the uptodate function.</pre>
<pre class="line current"><span class="ws">        </span>source, filename, uptodate = self.get_source(environment, name)
<span class="ws">        </span>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">        </span># try to load the code from the bytecode cache if there is a</pre>
<pre class="line after"><span class="ws">        </span># bytecode cache configured.</pre>
<pre class="line after"><span class="ws">        </span>bcc = environment.bytecode_cache</pre>
<pre class="line after"><span class="ws">        </span>if bcc is not None:</pre></div>
</div>

<li><div class="frame" id="frame-2167063812208">
  <h4>File <cite class="filename">"F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\templating.py"</cite>,
      line <em class="line">65</em>,
      in <code class="function">get_source</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>def get_source(</pre>
<pre class="line before"><span class="ws">        </span>self, environment: BaseEnvironment, template: str</pre>
<pre class="line before"><span class="ws">    </span>) -&gt; tuple[str, str | None, t.Callable[[], bool] | None]:</pre>
<pre class="line before"><span class="ws">        </span>if self.app.config[&#34;EXPLAIN_TEMPLATE_LOADING&#34;]:</pre>
<pre class="line before"><span class="ws">            </span>return self._get_source_explained(environment, template)</pre>
<pre class="line current"><span class="ws">        </span>return self._get_source_fast(environment, template)
<span class="ws">        </span>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _get_source_explained(</pre>
<pre class="line after"><span class="ws">        </span>self, environment: BaseEnvironment, template: str</pre>
<pre class="line after"><span class="ws">    </span>) -&gt; tuple[str, str | None, t.Callable[[], bool] | None]:</pre>
<pre class="line after"><span class="ws">        </span>attempts = []</pre></div>
</div>

<li><div class="frame" id="frame-2167063812352">
  <h4>File <cite class="filename">"F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\templating.py"</cite>,
      line <em class="line">99</em>,
      in <code class="function">_get_source_fast</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>for _srcobj, loader in self._iter_loaders(template):</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>return loader.get_source(environment, template)</pre>
<pre class="line before"><span class="ws">            </span>except TemplateNotFound:</pre>
<pre class="line before"><span class="ws">                </span>continue</pre>
<pre class="line current"><span class="ws">        </span>raise TemplateNotFound(template)
<span class="ws">        </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def _iter_loaders(self, template: str) -&gt; t.Iterator[tuple[Scaffold, BaseLoader]]:</pre>
<pre class="line after"><span class="ws">        </span>loader = self.app.jinja_loader</pre>
<pre class="line after"><span class="ws">        </span>if loader is not None:</pre>
<pre class="line after"><span class="ws">            </span>yield self.app, loader</pre></div>
</div>
</ul>
  <blockquote>jinja2.exceptions.TemplateNotFound: index.html
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;F:\dev\BrogDev\app\routes\home.py&#34;, line 9, in index
    return render_template(&#39;index.html&#39;)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\templating.py&#34;, line 149, in render_template
    template = app.jinja_env.get_or_select_template(template_name_or_list)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;F:\dev\BrogDev\flaskenv\Lib\site-packages\jinja2\environment.py&#34;, line 1087, in get_or_select_template
    return self.get_template(template_name_or_list, parent, globals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;F:\dev\BrogDev\flaskenv\Lib\site-packages\jinja2\environment.py&#34;, line 1016, in get_template
    return self._load_template(name, globals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;F:\dev\BrogDev\flaskenv\Lib\site-packages\jinja2\environment.py&#34;, line 975, in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;F:\dev\BrogDev\flaskenv\Lib\site-packages\jinja2\loaders.py&#34;, line 126, in load
    source, filename, uptodate = self.get_source(environment, name)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\templating.py&#34;, line 65, in get_source
    return self._get_source_fast(environment, template)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File &#34;F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\templating.py&#34;, line 99, in _get_source_fast
    raise TemplateNotFound(template)
jinja2.exceptions.TemplateNotFound: index.html
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
               ^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
         ^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\dev\BrogDev\app\routes\home.py", line 9, in index
    return render_template('index.html')
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\templating.py", line 149, in render_template
    template = app.jinja_env.get_or_select_template(template_name_or_list)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\dev\BrogDev\flaskenv\Lib\site-packages\jinja2\environment.py", line 1087, in get_or_select_template
    return self.get_template(template_name_or_list, parent, globals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\dev\BrogDev\flaskenv\Lib\site-packages\jinja2\environment.py", line 1016, in get_template
    return self._load_template(name, globals)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\dev\BrogDev\flaskenv\Lib\site-packages\jinja2\environment.py", line 975, in _load_template
    template = self.loader.load(self, name, self.make_globals(globals))
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\dev\BrogDev\flaskenv\Lib\site-packages\jinja2\loaders.py", line 126, in load
    source, filename, uptodate = self.get_source(environment, name)
                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\templating.py", line 65, in get_source
    return self._get_source_fast(environment, template)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "F:\dev\BrogDev\flaskenv\Lib\site-packages\flask\templating.py", line 99, in _get_source_fast
    raise TemplateNotFound(template)
jinja2.exceptions.TemplateNotFound: index.html


-->
